// Fetch map color value
// @param {Map} $map - Map
// @param {String} $color-name - Color name to get
// @param {String} $color-key - Color key (optional), default base
// @return {Color}
// --------------------------------------------------

@function color($map, $color-name, $color-key:null) {
  // Get the value from $color-name in the map
  // this can be of type color or a map
  $color-value: map-get($map, $color-name);

  // If we were given a map we need to grab the value
  // of the key that is passed or the base key
  @if (type-of($color-value) == map) {
    @if ($color-key) {
      $color-value: map-fetch($map, $color-name, $color-key);
    }
    @else {
      $color-value: map-fetch($map, $color-name, base);
    }
  }

  // If the value is a color then return the value
  // otherwise we need to error with the name
  @if (type-of($color-value) == color) {
    @return $color-value;
  }
  @return color-error($color-value, $color-name);
}

// Fetch map color contrast
// @param {Map} $colors - colors map
// @param {String} $value - color value or color name
//
// Example values
// --------------------------------------------------
// primary | #327eff   | #444
// map key | map value | hex color not in map
// --------------------------------------------------
//
// @param {Boolean} $custom-contrast-mode - use custom
// contrast function
// @return {Color}
// --------------------------------------------------
@function color-contrast($colors, $value, $custom-contrast-mode: null) {
  $color-value: null;

  // If the value is a color (e.g. #fff)
  // we need to call color-key to see if
  // it exists in the color map or not
  @if (type-of($value) == color) {
    $color-value: color-key($colors, $value);
  }
  @else {
    // If the value is a string (e.g. primary)
    // we want to get the value from the map
    // where it is the key
    $color-value: map-get($colors, $value);
  }

  // If the value is a map then get the contrast
  // from the map (e.g. (base: #327eff, contrast: blue))
  @if (type-of($color-value) == map) {
    // If the map has the contrast key then use that
    // otherwise it is a map with just a base so get
    // the inverse of that base color
    @if map-has-key($color-value, contrast) {
      $color-value: map-get($color-value, contrast);
    }
    @else {
      $color-value: color-inverse(map-get($color-value, base));
    }
  }
  @elseif ($custom-contrast-mode) {
    // If a mode was passed we need to call
    // the custom inverse function to get the inverse
    // color based on the mode
    $color-value: mode-inverse($color-value, $custom-contrast-mode);
  }
  @else {
    // Otherwise we were passed a color and can use the
    // function to get the inverse of that color
    // (e.g. #f4f4f4)
    $color-value: color-inverse($color-value);
  }

  // If the final value being returned is not a color
  // we should error
  @if (type-of($color-value) != color) {
    @return color-error($color-value);
  }

  @return $color-value;
}

// Fetch nested keys
// @param {Map} $map - Map
// @param {Arglist} $keys - Keys to fetch
// @return {*}
// --------------------------------------------------

@function map-fetch ($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}

// Pass dark and light colors based on the mode
// this is mostly used for toolbar buttons/titles
//
// @param {String} $color-value - color to get the inverse of
// @param {Boolean} $custom-contrast-mode - the mode to use
// in order to pass the custom colors
//
// @return {Color}
// --------------------------------------------------
@function mode-inverse($color-value, $custom-contrast-mode) {
  $dark: #000;
  $light: #FFF;

  @if ($custom-contrast-mode == md) {
    $dark: #424242;
    $light: #FFF;
  }
  @else if ($custom-contrast-mode == ios) {
    $dark: color($colors-ios, primary);
    $light: #FFF;
  }

  @return color-inverse($color-value, $dark, $light);
}

@function color-error($color-value, $color-name: null) {
  $error-msg: "

  The value `#{$color-value}` must be a color.
  If you are setting the value as a map make sure
  both the base and contrast are defined as colors.

  For example:

  $colors: (
    primary:    #327eff,
    secondary:  (base: #32db64, contrast: #000),
  );";

  // If there was a name passed it means the value doesn't exist
  // so error that the value isn't defined
  @if ($color-name) {
    $error-msg: "

    The map color `#{$color-name}` is not defined.
    Please make sure the color exists in your
    `$colors` map.

    For example:

    $colors: (
      #{$color-name}:    #327eff
    );";
  }

  @error $error-msg;

  @return null;
}

@function pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  }

  @return $value;
}

@mixin shadow-depth ($depth) {
  @function polynomial ($x, $coefficients) {
    @if type-of($coefficients) == list {
      $value: 0;

      @for $i from 1 through (length($coefficients)) {
        $value: $value + nth($coefficients, $i) * pow($x, length($coefficients) - $i);
      }

      @return $value;
    }

    @else {
      @debug "$coefficients is not a list";

      @return 0;
    }
  }

  @function offset-y-1 ($z) {
    // @return polynomial($z, (
    //   0.025, -0.125, -0.373, 3.12, -3.644, 2.997
    // )) * 1px;
    @return (0.4 * pow($z + 0.9, 2) + 0.2) * 1px;
  }

  @function offset-y-2 ($z) {
    @return polynomial($z, (
      -0.015, 0.1, 0.308, -3, 5.806, -2.2
    )) * 1px;
    // @return (0.1 * sinh($z - 0.5) + 0.7) * 1px;
  }

  @function offset-y-3 ($z) {
    @return polynomial($z, (
      0.005021, -0.034, -0.157, 2.329, -6.541, 7.397
    )) * 1px;
  }

  @function blur-radius-1 ($z) {
    // TODO: Improve
    // @return polynomial($z, (
    //   0.121, -0.728, -1.738, 18.753, -33.921, 19.513
    // )) * 1px;
    @return (pow($z / 1.1, 2) + 1) * 1px;
  }

  @function blur-radius-2 ($z) {
    // TODO: Improve
    @return polynomial($z, (
      0.218, -1.319, -3.513, 35.886, -65.056, 38.784
    )) * 1px;
  }

  @function blur-radius-3 ($z) {
    // TODO: Improve
    @return polynomial($z, (
      0.02, -0.095, -0.2, 0.748, 2.95, -2.423
    )) * 1px;
  }

  @function spread-radius-1 ($z) {
    // TODO: Improve
    @return polynomial($z, (
      -0.009787, 0.063, 0.168, -1.715, 3.318, -1.826
    )) * 1px;
  }

  @function spread-radius-2 ($z) {
    // TODO: Improve
    // @return polynomial($z, (
    //   -0.015, 0.1, 0.308, -3, 5.806, -3.2
    // )) * 1px;
    @return (pow(2, 1.7 * $z - 6)) * 1px;
  }

  @function spread-radius-3 ($z) {
    // TODO: Improve
    @return polynomial($z, (
      0.014, -0.083, -0.24, 1.759, -1.789, -1.662
    )) * 1px;
  }

  @function alpha-3 ($z) {
    // TODO: Improve
    @return polynomial($z, (
      -0.0005996, 0.004827, 0.00731, -0.161, 0.477, -0.128
    )) * 1px;
  }

  box-shadow:
    0 offset-y-1($depth) blur-radius-1($depth) spread-radius-1($depth) rgba(0, 0, 0, 0.14),
    0 offset-y-2($depth) blur-radius-2($depth) spread-radius-2($depth) rgba(0, 0, 0, 0.12),
    0 offset-y-3($depth) blur-radius-3($depth) spread-radius-3($depth) rgba(0, 0, 0, alpha-3($depth));
}
